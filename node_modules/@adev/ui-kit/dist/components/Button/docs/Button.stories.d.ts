import React from "react";
declare const _default: import("@storybook/types").ComponentAnnotations<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "link" | "default" | "clear" | "action" | "pseudo" | "accent" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
}>;
export default _default;
export declare const Playground: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "link" | "default" | "clear" | "action" | "pseudo" | "accent" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
}>;
export declare const View: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "link" | "default" | "clear" | "action" | "pseudo" | "accent" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
}>;
export declare const Size: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "link" | "default" | "clear" | "action" | "pseudo" | "accent" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
}>;
export declare const Width: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../../utils/defaultProps").defaultProps & {
    children?: React.ReactNode;
    view?: "link" | "default" | "clear" | "action" | "pseudo" | "accent" | undefined;
    size?: "xs" | "sm" | "md" | "lg" | "xl" | undefined;
    onClick?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerDown?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerUp?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onPointerLeave?: ((event?: React.PointerEvent<HTMLButtonElement> | undefined) => void) | undefined;
    onBlur?: ((event?: React.FocusEvent<HTMLButtonElement, Element> | undefined) => void) | undefined;
    name?: string | undefined;
    width?: "auto" | "available" | undefined;
    contentLeft?: React.ReactNode;
    contentRight?: React.ReactNode;
    type?: "button" | "reset" | "submit" | undefined;
    disabled?: boolean | undefined;
    rounded?: boolean | undefined;
    progress?: boolean | undefined;
    labelStyles?: React.CSSProperties | undefined;
    labelClassName?: string | undefined;
}>;
export declare const CarouselButtons: import("@storybook/types").AnnotatedStoryFn<import("@storybook/react/dist/types-0a347bb9").R, import("../../Carousel/CarouselButton/CarouselButton").ICarouselButtonProps>;
